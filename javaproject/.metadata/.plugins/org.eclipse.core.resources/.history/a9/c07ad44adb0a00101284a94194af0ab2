package test;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Container;
import java.awt.FileDialog;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import day0319.DbConnect;

public class SelectSawonTable extends JFrame implements ActionListener,ItemListener{

	Container cp;
	JTable table;
	DefaultTableModel model;
	JButton btnAdd,btnDel,btnUpdate;
	DbConnect db=new DbConnect();
	JRadioButton [] rb=new JRadioButton[7];

	BtnAdd addSawon=new BtnAdd("사원정보추가폼");
	BtnUpdate updateSawon=new BtnUpdate("사원정보수정폼");

	//생성자
	public SelectSawonTable(String title) {
		super(title); //JFrame부모생성자를 통해서 창제목을 통해서 제목을 보게하자

		//위치 너비
		this.setBounds(500, 100, 1000, 500);

		cp=this.getContentPane();
		//this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		cp.setBackground(new Color(255, 200, 200));
		initDesign();
		sawonTableSelect(1);
		//this.setVisible(true);
	}

	public void initDesign()
	{
		String [] title= {"등록번호","이름","나이","성별","부서","직급","급여","주소"};


		JPanel pbottom=new JPanel();
		this.add("South",pbottom);

		model=new DefaultTableModel(title, 0);
		table=new JTable(model);
		JScrollPane js=new JScrollPane(table);
		js.setBounds(10, 250, 550, 200);
		this.add(js);

		//테이블에 db데이터 출력
		sawonTableSelect(1);

		btnAdd=new JButton("사원정보추가");
		btnAdd.addActionListener(this);
		pbottom.add(btnAdd);

		btnDel=new JButton("사원정보삭제");
		btnDel.addActionListener(this);
		pbottom.add(btnDel);

		btnUpdate=new JButton("사원정보수정");
		btnUpdate.addActionListener(this);
		pbottom.add(btnUpdate);


		ButtonGroup bg=new ButtonGroup();

		String [] rb_label= {"전체","남자","여자","개발부","기획부","홍보부","인사부"};

		JPanel radioPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));

		int xpos=10;
		for(int i=0;i<rb.length;i++)
		{
			//라디오버튼 생성
			rb[i]=new JRadioButton(rb_label[i], i==0?true:false);
			rb[i].setBounds(xpos, 25, 75, 50);
			rb[i].setOpaque(false);
			//이벤트 추가
			rb[i].addItemListener(this);

			bg.add(rb[i]);
			radioPanel.add(rb[i]);
			xpos+=50;
		}

		this.add(radioPanel,"North");

		//addscore에 있는 추가버튼에 이벤트를 추가
		addSawon.btnAdd.addActionListener(this);
		//updatescore에 있는 추가버튼에 이벤트를 추가
		updateSawon.btnMod.addActionListener(this);

	}

	public void sawonTableSelect(int select)
	{
		String sql="";

		if(select==1)
			sql="select num,name,age,gender,buseo,position,to_char(pay,'L999,999,999') pay,addr from sawon order by num";

		else if(select==2)
			sql="select num,name,age,gender,buseo,position,to_char(pay,'L999,999,999') pay,addr from sawon where gender='남자' order by num";

		else if(select==3)
			sql="select num,name,age,gender,buseo,position,to_char(pay,'L999,999,999') pay,addr from sawon where gender='여자' order by num";

		else if(select==4)
			sql="select num,name,age,gender,buseo,position,to_char(pay,'L999,999,999') pay,addr from sawon where buseo='개발부' order by num";

		else if(select==5)
			sql="select num,name,age,gender,buseo,position,to_char(pay,'L999,999,999') pay,addr from sawon where buseo='기획부' order by num";

		else if(select==6)
			sql="select num,name,age,gender,buseo,position,to_char(pay,'L999,999,999') pay,addr from sawon where buseo='홍보부' order by num";

		else if(select==7)
			sql="select num,name,age,gender,buseo,position,to_char(pay,'L999,999,999') pay,addr from sawon where buseo='인사부' order by num";

		Connection conn=db.getConnection();
		PreparedStatement pstmt=null;
		ResultSet rs=null;

		try {
			pstmt=conn.prepareStatement(sql);
			rs=pstmt.executeQuery();

			//기존의 데이터 삭제 후 가져오기
			model.setRowCount(0);

			while(rs.next())
			{
				//테이블에 추가할 벡터 선언 후 데이터 추가
				Vector<String> data=new Vector<String>();
				data.add(rs.getString("num"));
				data.add(rs.getString("name"));
				data.add(rs.getString("age"));
				data.add(rs.getString("gender"));
				data.add(rs.getString("buseo"));
				data.add(rs.getString("position"));
				data.add(rs.getString("pay"));
				data.add(rs.getString("addr"));

				//벡터의 데이터를 행으로 추가
				model.addRow(data);
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			db.dbClose(rs, pstmt, conn);
		}
	}

	public void insertScoreData()
	{
		String name=addSawon.tfName.getText();
		String age=addSawon.tfAge.getText();
		String gender=addSawon.tfGender.getText();
		String buseo=addSawon.tfBuseo.getText();
		String position=addSawon.tfPosition.getText();
		String pay=addSawon.tfPay.getText();
		String addr=addSawon.tfAddr.getText();
		String pa=addSawon.pa.getText();

		String sql="insert into sawon values(seq_sawon.nextval,?,?,?,?,?,?,?,?)";

		Connection conn=db.getConnection();
		PreparedStatement pstmt=null;

		try {
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, name);
			pstmt.setString(2, age);
			pstmt.setString(3, gender);
			pstmt.setString(4, buseo);
			pstmt.setString(5, position);
			pstmt.setString(6, pay);
			pstmt.setString(7, addr);
			pstmt.setString(8, pa);

			//업데이트
			pstmt.execute();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			db.dbClose(pstmt, conn);
		}

	}

	public void deleteSawonData()
	{
		while(true) 
		{
			String num=JOptionPane.showInputDialog("삭제할 사원의 등록번호를 입력하세요");
			String sql="delete from sawon where num=?";

			if(num==null)
			{
				break;
			}

			else if(num.isEmpty())
			{
				JOptionPane.showMessageDialog(this, "삭제할 사원의 등록번호가 입력되지 않았습니다");
				continue;
			}

			Connection conn=db.getConnection();
			PreparedStatement pstmt=null;

			try {
				pstmt=conn.prepareStatement(sql);
				pstmt.setString(1, num);

				int a=pstmt.executeUpdate();

				if(a==0)
				{
					JOptionPane.showMessageDialog(this,"삭제할 사원의 등록번호가 존재하지 않습니다");
					continue;
				}

				else
					sawonTableSelect(1);
				break;
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}finally {
				db.dbClose(pstmt, conn);
			}
		}
	}
	
	//수정할 하나의 데이터를 수정폼에 띄우기
	public void isOneSawonData(String a)
	{
		String sql="select * from sawon where num=?";

		Connection conn=db.getConnection();
		PreparedStatement pstmt=null;
		ResultSet rs=null;

		try {
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, a);
			rs=pstmt.executeQuery();

			if(rs.next())
			{
				updateSawon.num=a; //hidden
				updateSawon.tfName.setText(rs.getString("name"));
				updateSawon.tfAge.setText(rs.getString("age"));
				updateSawon.tfGender.setText(rs.getString("gender"));
				updateSawon.tfBuseo.setText(rs.getString("buseo"));
				updateSawon.tfPosition.setText(rs.getString("position"));
				updateSawon.tfPay.setText(rs.getString("pay"));
				updateSawon.tfAddr.setText(rs.getString("addr"));
				updateSawon.pa.setText(rs.getString("photo"));

				//데이터를 읽어온 수정폼이 보이게
				updateSawon.setVisible(true);
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			db.dbClose(rs, pstmt, conn);
		}

	}

	public void update()
	{
		String name=updateSawon.tfName.getText();
		String age=updateSawon.tfAge.getText();
		String gender=updateSawon.tfGender.getText();
		String buseo=updateSawon.tfBuseo.getText();
		String position=updateSawon.tfPosition.getText();
		String pay=updateSawon.tfPay.getText();
		String addr=updateSawon.tfAddr.getText();
		String pa=updateSawon.pa.getText();
		String num=updateSawon.num;

		String sql="update sawon set name=?,age=?,gender=?,buseo=?,position=?,pay=?,addr=?,photo=? where num=?";

		Connection conn=db.getConnection();
		PreparedStatement pstmt=null;

		try {
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, name);
			pstmt.setString(2, age);
			pstmt.setString(3, gender);
			pstmt.setString(4, buseo);
			pstmt.setString(5, position);
			pstmt.setString(6, pay);
			pstmt.setString(7, addr);
			pstmt.setString(8, pa);
			pstmt.setString(9, num);

			pstmt.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			db.dbClose(pstmt, conn);
		}

	}

	public boolean checkIfSawonExist(String num) {
		// TODO Auto-generated method stub

		Connection conn = db.getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		String sql = "SELECT * FROM sawon WHERE num = ?";

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, num); // 입력한 등록번호 바인딩
			rs = pstmt.executeQuery();

			if (rs.next()) {
				String a = rs.getString("num");
				return true; // String a의 값이 존재하면 true 반환
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			db.dbClose(rs, pstmt, conn);
		}

		return false; // 예외가 발생하거나 결과가 없으면 false 반환
	}

	//이벤트
	@Override
	public void actionPerformed(ActionEvent e) {
		// 각 버튼에 대한 이벤트
		Object ob=e.getSource();

		if(ob==btnAdd)
		{
			addSawon.setVisible(true); //추가폼이 보인다
		}

		else if(ob==btnDel)
		{
			deleteSawonData();
		}

		else if(ob==btnUpdate)
		{	
			while(true)
			{
				String num=JOptionPane.showInputDialog("수정할 사원의 등록번호를 입력하세요");

				if(num==null)
				{
					break;
				}

				else if(num.isEmpty())
				{
					JOptionPane.showMessageDialog(this, "입력값이 없습니다");
					continue;
				}

				boolean a = checkIfSawonExist(num);

				if (a==true) 
				{
					this.isOneSawonData(num);  // 등록번호에 해당하는 사원 정보를 수정 폼에 띄움
					break;  // 사원 정보가 존재하면 반복문 종료
				} 

				else 
				{
					JOptionPane.showMessageDialog(this, "해당 등록번호는 존재하지 않습니다");
					continue;  // 등록번호가 존재하지 않으면 계속해서 입력을 받음
				}

			}

		}

		else if(ob==addSawon.btnAdd)
		{
			//입력폼을 읽어와서 db에 추가
			this.insertScoreData();	

			//테이블 다시출력
			this.sawonTableSelect(1);

			//초기화
			addSawon.tfName.setText("");
			addSawon.tfAge.setText("");
			addSawon.tfGender.setText("");
			addSawon.tfBuseo.setText("");
			addSawon.tfPosition.setText("");
			addSawon.tfPay.setText("");
			addSawon.tfAddr.setText("");
			addSawon.pa.setText("");
			addSawon.imageName = null;
		    addSawon.pd.repaint();

			//프레임 사라지게
			addSawon.setVisible(false);
		}



		else if(ob==updateSawon.btnMod)
		{
			this.update(); //수정 메서드 호출

			this.sawonTableSelect(1); //조회메서드 호출

			updateSawon.setVisible(false); //수정 창 닫히게
		}

	}

	@Override
	public void itemStateChanged(ItemEvent e) {
		// TODO Auto-generated method stub

		Object ob=e.getSource();

		for(int i=0;i<rb.length;i++)
		{
			if(rb[i]==ob)
				this.sawonTableSelect(i+1);
		}
	}

}